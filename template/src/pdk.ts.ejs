<% if (schema.imports.length > 0) { %>
const hostFunctions = Host.getFunctions()
<% } %>

function isNull(v: any): boolean {
  return v === undefined || v === null
}

function cast(caster: (v: any) => any, v: any): any {
  if (isNull(v)) return v
  return caster(v)
}

function castArray(caster: (v: any) => any) {
  return (v?: Array<any>) => {
    if (isNull(v)) return v
    caster = cast.bind(null, caster) // bind to null-preserving logic in `cast`
    return v!.map(caster)
  }
}

function castMap(caster: (v: any) => any) {
  return (v?: any) => {
    if (isNull(v)) return v

    caster = cast.bind(null, caster) // bind to null-preserving logic in `cast`
    const newMap: any = {}
    for (const k in v) {
      newMap[k] = caster(v![k])
    }
    return newMap
  }
}

function dateToJson(v?: Date): string | undefined | null {
  if (v === undefined || v === null) return v
  return v.toISOString()
}
function dateFromJson(v?: string): Date | undefined | null {
  if (v === undefined || v === null) return v
  return new Date(v)
}

function bufferToJson(v?: ArrayBuffer): string | undefined | null {
  if (v === undefined || v === null) return v
  return Host.arrayBufferToBase64(v)
}
function bufferFromJson(v?: string): ArrayBuffer | undefined | null {
  if (v === undefined || v === null) return v
  return Host.base64ToArrayBuffer(v)
}

<% Object.values(schema.schemas).forEach(schema => { %>
  <% if (isObject(schema)) { %>

/**
 * <%- formatCommentBlock(schema.description) %>
 */
export class <%- schema.name %> {
  <% schema.properties.forEach(p => { %>
  <% if (p.description) { %>

  /**
   * <%- formatCommentBlock(p.description) %>
   */
  <% } -%>
  <%- (!p.required || toTypeScriptType(p) === 'any') ? null : '// @ts-expect-error TS2564\n' -%>
  <%- p.name %><%- !p.required ? '?' : null %>: <%- toTypeScriptType(p) %>;
  <% }) %>

  static fromJson(obj: any): <%- schema.name %> {
    return {
      ...obj,
      <% schema.properties.forEach(p => { -%>
        <% if (isCastable(p.xtpType)) { -%>
          <%- p.name -%>: cast(<%- castExpression(p.xtpType, 'From') %>, obj.<%- p.name %>),
        <% } -%>
      <% }) -%>
    }
  }

  static toJson(obj: <%- schema.name %>): any{
    return {
      ...obj,
      <% schema.properties.forEach(p => { -%>
        <% if (isCastable(p.xtpType)) { -%>
          <%- p.name -%>: cast(<%- castExpression(p.xtpType, 'To') %>, obj.<%- p.name %>),
        <% } -%>
      <% }) -%>
    }
  }
}
  <% } else if (isEnum(schema)) { %>

/**
 * <%- formatCommentLine(schema.description) %>
 */
export enum <%- schema.name %> {
  <% schema.xtpType.values.forEach(variant => { -%>
    <%- variant
        // "host:foo$bar" -> "host_Foo$bar"
        .replace(/[^a-zA-Z0-9_$]+(.)?/g, (a, m) => '_' + (m ||'').toUpperCase())
        // "13" -> "$13" ("$" is a valid identifier char; with apologies to jquery)
        .replace(/^([^a-zA-Z_$])/, (a, m) => `$${m}`)
        // "host_Foo_Bar" -> "Host_Foo_Bar"
        .replace(/^(.)/, (a, m) => m.toUpperCase())
    %> = "<%- variant %>",
  <% }) -%>
}

  <% } %>

<% }) %>

<% schema.imports.forEach(imp => { %>
<% if (hasComment(imp)) -%>
/**
 * <%- formatCommentBlock(imp.description) %>
 *
<% if (hasComment(imp.input)) { -%>
 * @param {<%- toTypeScriptType(imp.input) %>} input - <%- formatCommentLine(imp.input.description) %>
<% } -%>
<% if (hasComment(imp.output)) { -%>
 * @returns {<%- toTypeScriptType(imp.output) %>} <%- formatCommentLine(imp.output.description) %>
<% } -%>
 */
export function <%- imp.name %>(<%- imp.input ? `input: ${toTypeScriptType(imp.input)}` : null %>) <%- imp.output ? `:${toTypeScriptType(imp.output)}` : null %> {
<% if (imp.input) { -%>
  <% if (isJsonEncoded(imp.input)) { -%>
    <% if (isObject(imp.input)) { %>
      // we need to cast the input back into a json encodable form
      const casted = cast(<%- castExpression(imp.input.xtpType, 'To') %>, input)
      const mem = Memory.fromJsonObject(casted)
    <% } else { %>
      const mem = Memory.fromJsonObject(input as any)
    <% } %>
  <% } else if (isUtf8Encoded(imp.input)) { -%>
  const mem = Memory.fromString(input as string)
  <% } else if (isString(imp.input.type)) { -%>
  const mem = Memory.fromString(input)
  <% } else { -%>
  const mem = Memory.fromBuffer(input)
  <% } -%>

  <% if (imp.output) { -%>const ptr =<% } -%> hostFunctions.<%- imp.name %>(mem.offset)
<% } else { -%>
  <% if (imp.output) { -%>const ptr =<% } -%> hostFunctions.<%- imp.name %>()
<% } -%>

<% if (imp.output) { -%>
  <% if (isJsonEncoded(imp.output)) { -%>
    <% if (isObject(imp.output)) { -%>
      // we need to cast the output back from its json encodable form
      const output = Memory.find(ptr).readJsonObject();
      return cast(<%- castExpression(imp.output.xtpType, 'From') %>, output)
    <% } else { -%>
      return Memory.find(ptr).readJsonObject();
    <% } -%>
  <% } else if (isUtf8Encoded(imp.output)) { -%>
    return Memory.find(ptr).readString();
  <% } else if (isString(imp.output)) { -%>
    return Memory.find(ptr).readString();
  <% } else { -%>
    return Memory.find(ptr).readBytes();
  <% } -%>
<% } %>
}
<% }) %>
