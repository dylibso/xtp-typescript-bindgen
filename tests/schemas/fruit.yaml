exports:
  voidFunc:
    description: "This demonstrates how you can create an export with\nno inputs or
      outputs. \n"
    codeSamples:
    - lang: typescript
      source: |
        console.log(''Hello World!'')
  topLevelPrimitives:
    description: |
      This demonstrates how you can accept or return primtive types.
      This function takes a utf8 string and returns a json encoded array of booleans
    codeSamples:
    - lang: typescript
      source: |
        return [true, false]
    input:
      type: string
      contentType: text/plain; charset=utf-8
      description: A string passed into plugin input
    output:
      type: array
      items:
        type: boolean
      contentType: application/json
      description: A bool array encoded as json
  referenceTypes:
    description: |
      This demonstrates how parameters can be references.
      It takes a Fruit enum and returns a ComplexObject json object
    codeSamples:
    - lang: typescript
      source: |
        return { ghost: GhostGang.inky, aBoolean: true, aString: "okay", anInt: 123 }
    input:
      contentType: application/json
      $ref: "#/components/schemas/Fruit"
    output:
      contentType: application/json
      $ref: "#/components/schemas/ComplexObject"
imports:
  eatAFruit:
    input:
      contentType: text/plain; charset=utf-8
      "$ref": "#/components/schemas/Fruit"
    output:
      type: boolean
      description: boolean encoded as json
      contentType: application/json
    description: |
      This is a host function. Right now host functions can only be the type (i64) -> i64.
      We will support more in the future. Much of the same rules as exports apply.
  kv_read:
    description: kvread
    input:
      type: string
      contentType: text/plain; charset=utf-8
      description: the key
    output:
      contentType: application/x-binary
      type: buffer
      description: the raw byte values at key
  kv_write:
    description: kvwrite
    contentType: application/json
    input:
      contentType: application/json
      "$ref": "#/components/schemas/WriteParams"
version: v1-draft
components:
  schemas:
    WriteParams:
      properties:
        key:
          type: string
          description: key
        value:
          type: buffer
          description: value
      description: Parameters to write to kv store
    Fruit:
      enum:
      - apple
      - orange
      - banana
      - strawberry
      description: A set of available fruits you can consume
    GhostGang:
      enum:
      - blinky
      - pinky
      - inky
      - clyde
      description: A set of all the enemies of pac-man
    ComplexObject:
      properties:
        ghost:
          "$ref": "#/components/schemas/GhostGang"
          description: I can override the description for the property here
        aBoolean:
          type: boolean
          description: A boolean prop
        aString:
          type: string
          description: An string prop
        anInt:
          type: integer
          format: int32
          description: An int prop
        anOptionalDate:
          type: string
          format: date-time
          description: |
            A datetime object, we will automatically serialize and deserialize
            this for you.
          nullable: true
        writeParams:
          "$ref": "#/components/schemas/WriteParams"
          nullable: true
      description: A complex json object
