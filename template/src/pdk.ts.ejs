<% if (schema.imports.length > 0) { %>
const hostFunctions = Host.getFunctions()
<% } %>

<% Object.values(schema.schemas).forEach(schema => { %>
  <% if (schema.properties) { %>

/**
 * <%= formatCommentBlock(schema.description) %>
 */
export class <%= schema.name %> {
  <% schema.properties.forEach(p => { %>
    <% if (p.description) { %>

  /**
   * <%= formatCommentBlock(p.description) %>
   */
  <% } -%>
  <%= p.nullable ? '' : '// @ts-expect-error TS2564\n' -%>
  <%= p.name %><%= p.nullable ? '?' : '' %>: <%- toTypeScriptType(p) %>;
  <% }) %>
}
  <% } else if (schema.enum) { %>

/**
 * <%= formatCommentLine(schema.description) %>
 */
export enum <%= schema.name %> {
  <% schema.enum.forEach(variant => { -%>
    <%= variant %> = "<%= variant %>",
  <% }) -%>
}

  <% } %>

<% }) %>


<% schema.imports.forEach(imp => { %>
<% if (hasComment(imp)) -%>
/**
 * <%= formatCommentBlock(imp.description) %>
 *
<% if (hasComment(imp.input)) { -%>
 * @param input {<%- toTypeScriptType(imp.input) %>} <%= formatCommentLine(imp.input.description) %>
<% } -%>
<% if (hasComment(imp.output)) { -%>
 * @returns {<%- toTypeScriptType(imp.output) %>} <%= formatCommentLine(imp.output.description) %>
<% } -%>
 */
export function <%= imp.name %>(input:<%- imp.input ? toTypeScriptType(imp.input) : 'any' %>) <%- imp.output ? `:${toTypeScriptType(imp.output)}` : null %> {
<% if (imp.input) { -%>
  <% if (imp.input.contentType === 'application/json') { -%>
  const mem = Memory.fromJsonObject(input as any)
  <% } else if (imp.input.contentType === 'text/plain; charset=UTF-8') { -%>
  const mem = Memory.fromString(input)
  <% } else if (imp.input.type === 'string') { -%>
  const mem = Memory.fromString(input)
  <% } else if (imp.input.type === 'string') { -%>
  <% } else { -%>
  const mem = Memory.fromBuffer(input)
  <% } -%>

  <% if (imp.output) { -%>const ptr =<% } -%> hostFunctions.<%= imp.name %>(mem.offset)
<% } else { -%>
  <% if (imp.output) { -%>const ptr =<% } -%> hostFunctions.<%= imp.name %>()
<% } -%>

<% if (imp.output) { -%>
  <% if (imp.output.contentType === 'application/json') { -%>
    return Memory.find(ptr).readJsonObject();
  <% } else if (imp.output.contentType === 'text/plain; charset=UTF-8') { -%>
    return Memory.find(ptr).readString();
  <% } else if (imp.output.type === 'string') { -%>
    return Memory.find(ptr).readString();
  <% } else { -%>
    return Memory.find(ptr).readBytes();
  <% } -%>
<% } %>
}
<% }) %>
