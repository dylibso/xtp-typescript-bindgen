{
  "version": 3,
  "sources": ["../src/index.ts", "../src/pdk.ts", "../src/main.ts"],
  "sourcesContent": ["import * as main from \"./main\";\n\nimport { WriteParams, Fruit, GhostGang, ComplexObject } from \"./pdk\";\n\nexport function voidFunc(): number {\n  main.voidFuncImpl();\n\n  return 0;\n}\n\nexport function topLevelPrimitives(): number {\n  const input = Host.inputString();\n\n  const output = main.topLevelPrimitivesImpl(input);\n\n  Host.outputString(JSON.stringify(output));\n\n  return 0;\n}\n\nexport function referenceTypes(): number {\n  const input = Host.inputString() as Fruit;\n\n  const output = main.referenceTypesImpl(input);\n\n  Host.outputString(JSON.stringify(output));\n\n  return 0;\n}\n", "const hostFunctions = Host.getFunctions();\n\n/**\n * Parameters to write to kv store\n */\nexport class WriteParams {\n  /**\n   * key\n   */\n  key?: string;\n\n  /**\n   * value\n   */\n  value?: ArrayBufferLike;\n}\n\n/**\n * A set of available fruits you can consume\n */\nexport enum Fruit {\n  apple = \"apple\",\n  orange = \"orange\",\n  banana = \"banana\",\n  strawberry = \"strawberry\",\n}\n\n/**\n * A set of all the enemies of pac-man\n */\nexport enum GhostGang {\n  blinky = \"blinky\",\n  pinky = \"pinky\",\n  inky = \"inky\",\n  clyde = \"clyde\",\n}\n\n/**\n * A complex json object\n */\nexport class ComplexObject {\n  /**\n   * I can override the description for the property here\n   */\n  // @ts-expect-error TS2564\n  ghost: GhostGang;\n\n  /**\n   * A boolean prop\n   */\n  // @ts-expect-error TS2564\n  aBoolean: boolean;\n\n  /**\n   * An string prop\n   */\n  // @ts-expect-error TS2564\n  aString: string;\n\n  /**\n   * An int prop\n   */\n  // @ts-expect-error TS2564\n  anInt: number;\n\n  /**\n   * A datetime object, we will automatically serialize and deserialize\n   * this for you.\n   */\n  anOptionalDate?: string;\n}\n\n/**\n * This is a host function. Right now host functions can only be the type (i64) -&gt; i64.\n * We will support more in the future. Much of the same rules as exports apply.\n *\n * @param input {Fruit} A set of available fruits you can consume\n * @returns {boolean} boolean encoded as json\n */\nexport function eatAFruit(input: Fruit): boolean {\n  const mem = Memory.fromString(input);\n\n  const ptr = hostFunctions.eatAFruit(mem.offset);\n\n  return Memory.find(ptr).readJsonObject();\n}\n\n/**\n * kvread\n *\n * @param input {string} the key\n * @returns {ArrayBufferLike} the raw byte values at key\n */\nexport function kv_read(input: string): ArrayBufferLike {\n  const mem = Memory.fromString(input);\n\n  const ptr = hostFunctions.kv_read(mem.offset);\n\n  return Memory.find(ptr).readBytes();\n}\n\n/**\n * kvwrite\n *\n * @param input {WriteParams} Parameters to write to kv store\n */\nexport function kv_write(input: WriteParams) {\n  const mem = Memory.fromJsonObject(input as any);\n\n  hostFunctions.kv_write(mem.offset);\n}\n", "import { WriteParams, Fruit, GhostGang, ComplexObject } from \"./pdk\";\n\nimport { eatAFruit, kv_read, kv_write } from \"./pdk\";\n\n/**\n * This demonstrates how you can create an export with\n * no inputs or outputs.\n *\n */\nexport function voidFuncImpl() {\n  console.log(\"Hello World!\");\n}\n\n/**\n * This demonstrates how you can accept or return primtive types.\n * This function takes a utf8 string and returns a json encoded array of booleans\n *\n * @param input {string} A string passed into plugin input\n * @returns {Array<boolean>} A bool array encoded as json\n */\nexport function topLevelPrimitivesImpl(input: string): Array<boolean> {\n  return [true, false];\n}\n\n/**\n * This demonstrates how parameters can be references.\n * It takes a Fruit enum and returns a ComplexObject json object\n *\n * @param input {Fruit} A set of available fruits you can consume\n * @returns {ComplexObject} A complex json object\n */\nexport function referenceTypesImpl(input: Fruit): ComplexObject {\n  return { ghost: GhostGang.inky, aBoolean: true, aString: \"okay\", anInt: 123 };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAM,gBAAgB,KAAK,aAAa;;;ACSjC,SAAS,eAAe;AAC7B,UAAQ,IAAI,cAAc;AAC5B;AASO,SAAS,uBAAuB,OAA+B;AACpE,SAAO,CAAC,MAAM,KAAK;AACrB;AASO,SAAS,mBAAmB,OAA6B;AAC9D,SAAO,EAAE,0BAAuB,UAAU,MAAM,SAAS,QAAQ,OAAO,IAAI;AAC9E;;;AF7BO,SAAS,WAAmB;AACjC,EAAK,aAAa;AAElB,SAAO;AACT;AAEO,SAAS,qBAA6B;AAC3C,QAAM,QAAQ,KAAK,YAAY;AAE/B,QAAM,SAAc,uBAAuB,KAAK;AAEhD,OAAK,aAAa,KAAK,UAAU,MAAM,CAAC;AAExC,SAAO;AACT;AAEO,SAAS,iBAAyB;AACvC,QAAM,QAAQ,KAAK,YAAY;AAE/B,QAAM,SAAc,mBAAmB,KAAK;AAE5C,OAAK,aAAa,KAAK,UAAU,MAAM,CAAC;AAExC,SAAO;AACT;",
  "names": []
}
